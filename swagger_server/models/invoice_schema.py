# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.invoice_schema_company_address import InvoiceSchemaCompanyAddress  # noqa: F401,E501
from swagger_server import util


class InvoiceSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, invoice_number: Object=None, company_name: Object=None, company_address: InvoiceSchemaCompanyAddress=None, _date: Object=None, payment_terms: Object=None, bill_to_name: Object=None, bill_to_address: InvoiceSchemaCompanyAddress=None, due_date: Object=None, balance_due: Object=None, items: Object=None, subtotal: Object=None, tax: Object=None, total: Object=None):  # noqa: E501
        """InvoiceSchema - a model defined in Swagger

        :param invoice_number: The invoice_number of this InvoiceSchema.  # noqa: E501
        :type invoice_number: Object
        :param company_name: The company_name of this InvoiceSchema.  # noqa: E501
        :type company_name: Object
        :param company_address: The company_address of this InvoiceSchema.  # noqa: E501
        :type company_address: InvoiceSchemaCompanyAddress
        :param _date: The _date of this InvoiceSchema.  # noqa: E501
        :type _date: Object
        :param payment_terms: The payment_terms of this InvoiceSchema.  # noqa: E501
        :type payment_terms: Object
        :param bill_to_name: The bill_to_name of this InvoiceSchema.  # noqa: E501
        :type bill_to_name: Object
        :param bill_to_address: The bill_to_address of this InvoiceSchema.  # noqa: E501
        :type bill_to_address: InvoiceSchemaCompanyAddress
        :param due_date: The due_date of this InvoiceSchema.  # noqa: E501
        :type due_date: Object
        :param balance_due: The balance_due of this InvoiceSchema.  # noqa: E501
        :type balance_due: Object
        :param items: The items of this InvoiceSchema.  # noqa: E501
        :type items: Object
        :param subtotal: The subtotal of this InvoiceSchema.  # noqa: E501
        :type subtotal: Object
        :param tax: The tax of this InvoiceSchema.  # noqa: E501
        :type tax: Object
        :param total: The total of this InvoiceSchema.  # noqa: E501
        :type total: Object
        """
        self.swagger_types = {
            'invoice_number': Object,
            'company_name': Object,
            'company_address': InvoiceSchemaCompanyAddress,
            '_date': Object,
            'payment_terms': Object,
            'bill_to_name': Object,
            'bill_to_address': InvoiceSchemaCompanyAddress,
            'due_date': Object,
            'balance_due': Object,
            'items': Object,
            'subtotal': Object,
            'tax': Object,
            'total': Object
        }

        self.attribute_map = {
            'invoice_number': 'invoice_number',
            'company_name': 'company_name',
            'company_address': 'company_address',
            '_date': 'date',
            'payment_terms': 'payment_terms',
            'bill_to_name': 'bill_to_name',
            'bill_to_address': 'bill_to_address',
            'due_date': 'due_date',
            'balance_due': 'balance_due',
            'items': 'items',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'total': 'total'
        }
        self._invoice_number = invoice_number
        self._company_name = company_name
        self._company_address = company_address
        self.__date = _date
        self._payment_terms = payment_terms
        self._bill_to_name = bill_to_name
        self._bill_to_address = bill_to_address
        self._due_date = due_date
        self._balance_due = balance_due
        self._items = items
        self._subtotal = subtotal
        self._tax = tax
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'InvoiceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvoiceSchema of this InvoiceSchema.  # noqa: E501
        :rtype: InvoiceSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invoice_number(self) -> Object:
        """Gets the invoice_number of this InvoiceSchema.


        :return: The invoice_number of this InvoiceSchema.
        :rtype: Object
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number: Object):
        """Sets the invoice_number of this InvoiceSchema.


        :param invoice_number: The invoice_number of this InvoiceSchema.
        :type invoice_number: Object
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")  # noqa: E501

        self._invoice_number = invoice_number

    @property
    def company_name(self) -> Object:
        """Gets the company_name of this InvoiceSchema.


        :return: The company_name of this InvoiceSchema.
        :rtype: Object
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name: Object):
        """Sets the company_name of this InvoiceSchema.


        :param company_name: The company_name of this InvoiceSchema.
        :type company_name: Object
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def company_address(self) -> InvoiceSchemaCompanyAddress:
        """Gets the company_address of this InvoiceSchema.


        :return: The company_address of this InvoiceSchema.
        :rtype: InvoiceSchemaCompanyAddress
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address: InvoiceSchemaCompanyAddress):
        """Sets the company_address of this InvoiceSchema.


        :param company_address: The company_address of this InvoiceSchema.
        :type company_address: InvoiceSchemaCompanyAddress
        """
        if company_address is None:
            raise ValueError("Invalid value for `company_address`, must not be `None`")  # noqa: E501

        self._company_address = company_address

    @property
    def _date(self) -> Object:
        """Gets the _date of this InvoiceSchema.


        :return: The _date of this InvoiceSchema.
        :rtype: Object
        """
        return self.__date

    @_date.setter
    def _date(self, _date: Object):
        """Sets the _date of this InvoiceSchema.


        :param _date: The _date of this InvoiceSchema.
        :type _date: Object
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def payment_terms(self) -> Object:
        """Gets the payment_terms of this InvoiceSchema.


        :return: The payment_terms of this InvoiceSchema.
        :rtype: Object
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms: Object):
        """Sets the payment_terms of this InvoiceSchema.


        :param payment_terms: The payment_terms of this InvoiceSchema.
        :type payment_terms: Object
        """
        if payment_terms is None:
            raise ValueError("Invalid value for `payment_terms`, must not be `None`")  # noqa: E501

        self._payment_terms = payment_terms

    @property
    def bill_to_name(self) -> Object:
        """Gets the bill_to_name of this InvoiceSchema.


        :return: The bill_to_name of this InvoiceSchema.
        :rtype: Object
        """
        return self._bill_to_name

    @bill_to_name.setter
    def bill_to_name(self, bill_to_name: Object):
        """Sets the bill_to_name of this InvoiceSchema.


        :param bill_to_name: The bill_to_name of this InvoiceSchema.
        :type bill_to_name: Object
        """
        if bill_to_name is None:
            raise ValueError("Invalid value for `bill_to_name`, must not be `None`")  # noqa: E501

        self._bill_to_name = bill_to_name

    @property
    def bill_to_address(self) -> InvoiceSchemaCompanyAddress:
        """Gets the bill_to_address of this InvoiceSchema.


        :return: The bill_to_address of this InvoiceSchema.
        :rtype: InvoiceSchemaCompanyAddress
        """
        return self._bill_to_address

    @bill_to_address.setter
    def bill_to_address(self, bill_to_address: InvoiceSchemaCompanyAddress):
        """Sets the bill_to_address of this InvoiceSchema.


        :param bill_to_address: The bill_to_address of this InvoiceSchema.
        :type bill_to_address: InvoiceSchemaCompanyAddress
        """
        if bill_to_address is None:
            raise ValueError("Invalid value for `bill_to_address`, must not be `None`")  # noqa: E501

        self._bill_to_address = bill_to_address

    @property
    def due_date(self) -> Object:
        """Gets the due_date of this InvoiceSchema.


        :return: The due_date of this InvoiceSchema.
        :rtype: Object
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: Object):
        """Sets the due_date of this InvoiceSchema.


        :param due_date: The due_date of this InvoiceSchema.
        :type due_date: Object
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def balance_due(self) -> Object:
        """Gets the balance_due of this InvoiceSchema.


        :return: The balance_due of this InvoiceSchema.
        :rtype: Object
        """
        return self._balance_due

    @balance_due.setter
    def balance_due(self, balance_due: Object):
        """Sets the balance_due of this InvoiceSchema.


        :param balance_due: The balance_due of this InvoiceSchema.
        :type balance_due: Object
        """
        if balance_due is None:
            raise ValueError("Invalid value for `balance_due`, must not be `None`")  # noqa: E501

        self._balance_due = balance_due

    @property
    def items(self) -> Object:
        """Gets the items of this InvoiceSchema.


        :return: The items of this InvoiceSchema.
        :rtype: Object
        """
        return self._items

    @items.setter
    def items(self, items: Object):
        """Sets the items of this InvoiceSchema.


        :param items: The items of this InvoiceSchema.
        :type items: Object
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def subtotal(self) -> Object:
        """Gets the subtotal of this InvoiceSchema.


        :return: The subtotal of this InvoiceSchema.
        :rtype: Object
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal: Object):
        """Sets the subtotal of this InvoiceSchema.


        :param subtotal: The subtotal of this InvoiceSchema.
        :type subtotal: Object
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")  # noqa: E501

        self._subtotal = subtotal

    @property
    def tax(self) -> Object:
        """Gets the tax of this InvoiceSchema.


        :return: The tax of this InvoiceSchema.
        :rtype: Object
        """
        return self._tax

    @tax.setter
    def tax(self, tax: Object):
        """Sets the tax of this InvoiceSchema.


        :param tax: The tax of this InvoiceSchema.
        :type tax: Object
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")  # noqa: E501

        self._tax = tax

    @property
    def total(self) -> Object:
        """Gets the total of this InvoiceSchema.


        :return: The total of this InvoiceSchema.
        :rtype: Object
        """
        return self._total

    @total.setter
    def total(self, total: Object):
        """Sets the total of this InvoiceSchema.


        :param total: The total of this InvoiceSchema.
        :type total: Object
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total
